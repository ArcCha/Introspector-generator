beginning-line:
// GEN INTROSPECTOR 
ending-line:
// END GEN INTROSPECTOR
header-directories:
example_classes/ab
header-files:
example_classes/c.h
generated-file-path:
example_generated_introspectors.h
generated-specializations-path:
@GENERATED_SOURCES_PATH@/specializations.h
introspector-field-format:
			FIELD(%x);
introspector-body-format:
		template <class F%x, class... Instances>
		static void introspect_body(
			%x,
			F f,
			Instances&&... _t_
		) {
%x		}

specialized-list-format:
template <class __T%x>
struct types_in<%x, __T>{
	using types = type_list<%x>;
};

enum-field-format:
		case T::%x: return "%x";
enum-introspector-body-format:
	template <class... T>
	const char* enum_to_string(const %x e, T...) {
		/* Make dependent */
		using T = std::conditional_t<sizeof...(A) == 0, decltype(e), int>;

		switch(e) {
%x		default: return "Invalid";
		}
	}

enum-arg-format:
			T::%x
enum-to-args-body-format:
	template <class F>
	void enum_to_args_impl(const %x e, F f) {
		/* Make dependent */
		using T = std::conditional_t<std::is_same_v<F, int>, int, decltype(e)>;

		f(
%x		);
	}

generated-file-format:
#pragma once
#define FIELD(x) f(#x, _t_.x...)

// Forward declarations
%xnamespace augs {
%x	struct introspection_access {
		/* Generated introspectors begin here */

%x	};
}